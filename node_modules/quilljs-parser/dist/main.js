!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports["quilljs-parser"]=e():t["quilljs-parser"]=e()}(self,(function(){return(()=>{"use strict";var t={607:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.parseQuillDelta=void 0;let r=!1;function s(t,e){t.insert.video||t.insert.image?function(t,e){e.paragraphs.push({embed:t.insert}),r=!1,n(e)}(t,e):t.insert.formula?function(t,e){var r;0===e.paragraphs.length&&n(e),null===(r=e.paragraphs[e.paragraphs.length-1].textRuns)||void 0===r||r.push({formula:t.insert.formula,attributes:t.attributes})}(t,e):"\n"===t.insert?function(t,e){t.attributes&&(e.paragraphs[e.paragraphs.length-1].attributes=t.attributes,"ordered"===t.attributes.list?r||(e.setup.numberedLists++,r=!0):r=!1),n(e)}(t,e):function(t,e){if(0===e.paragraphs.length&&n(e),t.insert.match(/\n/)){const s=t.insert.split(/(\n)/);for(const t of s)"\n"===t?(n(e),r=!1):a(t,e)}else a(t.insert,e,t.attributes)}(t,e)}function n(t){t.paragraphs.push({textRuns:[]})}function a(t,e,r){var s,n;r?(null===(s=e.paragraphs[e.paragraphs.length-1].textRuns)||void 0===s||s.push({text:t,attributes:r}),r.link&&e.setup.hyperlinks.push({text:t,link:r.link})):null===(n=e.paragraphs[e.paragraphs.length-1].textRuns)||void 0===n||n.push({text:t})}e.parseQuillDelta=function(t){r=!1;const e={paragraphs:[],setup:{numberedLists:0,hyperlinks:[]}};for(const r of t.ops)s(r,e);return e}}},e={};return function r(s){if(e[s])return e[s].exports;var n=e[s]={exports:{}};return t[s](n,n.exports,r),n.exports}(607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,