"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useIsRefreshingRef = exports.Refreshable = void 0;
const react_1 = __importStar(require("react"));
const react_router_dom_1 = require("react-router-dom");
const use_previous_1 = __importDefault(require("use-previous"));
const use_force_update_1 = __importDefault(require("use-force-update"));
const ctx = react_1.createContext({
    isRefreshingRef: { current: false },
    counterFx() { },
});
function Refreshable({ children, on }) {
    const counterRef = react_1.useRef(0);
    const isRefreshingRef = react_1.useRef(false);
    const currCtxValue = react_1.useRef({
        isRefreshingRef,
        counterFx() {
            counterRef.current++;
            return () => {
                counterRef.current--;
            };
        },
    }).current;
    const parentCtxValue = react_1.useContext(ctx);
    react_1.useLayoutEffect(parentCtxValue.counterFx, []);
    const curr = react_router_dom_1.useLocation();
    const prev = use_previous_1.default(curr);
    const isRefreshRender = counterRef.current === 0 &&
        prev &&
        prev.pathname === curr.pathname &&
        prev.search === curr.search &&
        prev.hash === curr.hash &&
        prev.key !== curr.key;
    if (isRefreshRender) {
        isRefreshingRef.current = true;
    }
    // Parent hook runs later than child hook
    react_1.useEffect(() => {
        if (!isRefreshRender && isRefreshingRef.current) {
            isRefreshingRef.current = false;
        }
    });
    const forceUpdate = use_force_update_1.default();
    const onRef = react_1.useRef(on);
    onRef.current = on;
    react_1.useLayoutEffect(() => {
        var _a;
        if (isRefreshRender) {
            forceUpdate();
            (_a = onRef.current) === null || _a === void 0 ? void 0 : _a.call(onRef);
        }
    }, [isRefreshRender]);
    return react_1.default.createElement(ctx.Provider, { value: currCtxValue }, isRefreshRender || children);
}
exports.Refreshable = Refreshable;
function useIsRefreshingRef() {
    return react_1.useContext(ctx).isRefreshingRef;
}
exports.useIsRefreshingRef = useIsRefreshingRef;
